@model JustDoorsAndScreens.DoorItem

@{
    ViewBag.Title = "EditDoorItem";
}




@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.DoorItemID)

    @Html.HiddenFor(model => model.QuoteID)

    @Html.HiddenFor(model => model.SliderTopTrackType, new { @Value = "1" })
    @Html.HiddenFor(model => model.SliderBottomTrackType, new { @Value = "1" })
    @Html.HiddenFor(model => model.SliderSideChannelType, new { @Value = "1" })

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="card border border-dark shadow">

        <div class="card-header bg-light border-dark sticky-top">
            <h4 class="text-dark"><strong>Edit Door Item</strong></h4>
            <span class="text-dark text-sm-center"><strong>Customer:</strong> @Model.Quote.Customer  <strong>Quote:</strong>  @Model.QuoteID</span>
        </div>



        <div class="card-body">
            <div class="row">

                <div class="col-sm-4">

                    <h5><strong class="text-secondary">Details</strong></h5>
                    <hr class="bg-light" />


                    <div class="form-group">
                        <strong>@Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label" })</strong>

                        @*@Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })*@
                        @Html.TextAreaFor(model => model.Description, 5, 20, new { @class = "form-control", @id = "Description" })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })

                    </div>

                    <div class="form-group">
                        <strong>@Html.LabelFor(model => model.Cost, htmlAttributes: new { @class = "control-label" })</strong>

                        @Html.EditorFor(model => model.Cost, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Cost, "", new { @class = "text-danger" })

                    </div>
                </div>

                <div class="col-sm-2">

                    <h5><strong class="text-secondary">Description</strong></h5>
                    <hr class="bg-light" />

                    <div class="form-group">
                        <strong>@Html.LabelFor(model => model.DoorTypeID, "DoorTypeID", htmlAttributes: new { @class = "control-label" })</strong>

                        @Html.DropDownList("DoorTypeID", null, htmlAttributes: new { @class = "form-control", @id = "DoorType", @onchange = "ChangeDoorType();" })
                        @Html.ValidationMessageFor(model => model.DoorTypeID, "", new { @class = "text-danger" })

                    </div>

                    <div class="form-group">
                        <strong>@Html.LabelFor(model => model.DesignTypeID, "DesignTypeID", htmlAttributes: new { @class = "control-label" })</strong>

                        @Html.DropDownList("DesignTypeID", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.DesignTypeID, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        <strong>@Html.LabelFor(model => model.ColorTypeID, "ColorTypeID", htmlAttributes: new { @class = "control-label" })</strong>

                        @Html.DropDownList("ColorTypeID", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.ColorTypeID, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        <strong>@Html.LabelFor(model => model.LockTypeID, "LockTypeID", htmlAttributes: new { @class = "control-label" })</strong>

                        @Html.DropDownList("LockTypeID", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.LockTypeID, "", new { @class = "text-danger" })

                    </div>

                    <div class="form-group">
                        <strong>@Html.LabelFor(model => model.LockHeight, "LockHeight", htmlAttributes: new { @class = "control-label" })</strong>
                        @Html.EditorFor(model => model.LockHeight, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.LockHeight, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group">
                        <strong>Adaptors</strong>
                        @Html.DropDownList("HingeType", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.HingeType, "", new { @class = "text-danger" })
                    </div>

                </div>

                <div class="col-sm-2">
                    <h5><strong class="text-secondary">Height</strong></h5>
                    <hr class="bg-light" />

                    <div class="form-group">

                        <strong>@Html.LabelFor(model => model.Height, htmlAttributes: new { @class = "control-label" })</strong>

                        @Html.EditorFor(model => model.Height, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Height, "", new { @class = "text-danger" })

                    </div>
                </div>

                <div class="col-sm-2">
                    <h5><strong class="text-secondary">Description</strong></h5>
                    <hr class="bg-light" />

                    <img class="p-3 img-fluid" id="pic" src="~/images/Door_LH.PNG" />
                </div>

                <div class="col-sm-2">

                    <h5><strong class="text-secondary">Widths</strong></h5>
                    <hr class="bg-light" />
                    <div class="form-group">
                        <strong>Top</strong>

                        @Html.EditorFor(model => model.Width1, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Width1, "", new { @class = "text-danger" })
                    </div>

                    <br />

                    <div class="form-group">
                        <strong>Middle</strong>

                        @Html.EditorFor(model => model.Width2, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Width2, "", new { @class = "text-danger" })
                    </div>

                    <br />

                    <div class="form-group">
                        <strong>Bottom</strong>

                        @Html.EditorFor(model => model.Width3, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Width3, "", new { @class = "text-danger" })
                    </div>

                </div>



            </div>
            @*end of row*@

        </div>
        @*end of card body*@


        <div class="card-footer">
            @*<input type="submit" value="Save" class="btn btn-primary border-dark shadow" />*@
            <button type="submit" class="btn btn-primary border-dark shadow"><i class="fa fa-save"></i> Save</button>
            @*@Html.ActionLink("Back Details", "QuoteDetails", "Quotes", new { id = Model.QuoteID }, new { @class = "btn btn-secondary border-dark shadow" })

                @Html.ActionLink("Back Details", "QuoteDetails", "Quotes", new { id = Model.QuoteID }, new { @class = "btn btn-secondary" })*@

            <a href='@Url.Action("QuoteDetails/"+ @Model.QuoteID, "Quotes")' id="" class="btn btn-secondary border-dark shadow"><i class="fa fa-arrow-circle-left"></i> Back to Quote </a>
        </div>




    </div>
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")


    <script>

        // ********************************************************************************
        // * Document loaded completed Trigger
        // ********************************************************************************
        $(document).ready(function () {

            ChangeDoorType();

            //$('#TrackTypeID').multiselect({
            //    buttonClass: 'btn btn-secondary',
            //    //buttonWidth: '280px',
            //    templates: {
            //        li: '<li class="checkList"><a tabindex="0"><div class="aweCheckbox aweCheckbox-danger"><label for=""></label></div></a></li>',
            //    }
            //});

            //$('.multiselect-container div.aweCheckbox').each(function (index) {

            //    var id = 'multiselect-' + index,
            //        $input = $(this).find('input');

            //    // Associate the label and the input
            //    $(this).find('label').attr('for', id);
            //    $input.attr('id', id);

            //    // Remove the input from the label wrapper
            //    $input.detach();

            //    // Place the input back in before the label
            //    $input.prependTo($(this));

            //    $(this).click(function (e) {
            //        // Prevents the click from bubbling up and hiding the dropdown
            //        e.stopPropagation();
            //    });

            //});


        });


        function ChangeDoorType() {
            var picture = $("#DoorType :selected").text();

            picture = window.location.origin + '@Request.ApplicationPath' + '/images/' + picture + '.PNG';
            console.log('Picture :' + picture);
            $("#pic").attr("src", picture);
        }


        //function GetSelectedTracks() {
        //    var trck='';
        //    $("#TrackTypeID option:selected").each(function () {
        //        var $this = $(this);
        //        if ($this.length) {
        //            var selText = $this.text();
        //            var selValue = $this.val();
        //            console.log('Select TrackID : ' + selText + ' - Selected Track Value : ' + selValue);

        //            trck = trck + selText + ', ';
        //        }
        //    });

        //    $('#tracks').val(trck.slice(0, -2));
        //};

    </script>

}
