@model JustDoorsAndScreens.DoorItem

@{
    ViewBag.Title = "CreateDoorItem";
}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    @Html.HiddenFor(model => model.QuoteID, new { @Value = ViewBag.QuoteID })

    @Html.HiddenFor(model => model.SliderTopTrackType, new { @Value = "1" })
    @Html.HiddenFor(model => model.SliderBottomTrackType, new { @Value = "1" })
    @Html.HiddenFor(model => model.SliderSideChannelType, new { @Value = "1" })

    @Html.HiddenFor(model => model.Required, new { @Value = "1" })

    <div class="card border border-dark shadow">

        <div class="card-header bg-light border-dark sticky-top">
            <h3 class="text-dark"><strong>Create Door Item</strong></h3>
            <span class="text-dark text-sm-center"><strong>Customer:</strong> @ViewBag.Customer  <strong>Quote:</strong>  @ViewBag.QuoteID</span>
        </div>

        @*<div class="card sticky-top bg-secondary border-dark shadow">
                <div class="card-body">
                    <span class="text-white text-sm-center"><strong>Customer:</strong> @ViewBag.Customer  <strong>Quote:</strong>  @ViewBag.QuoteID</span>
                </div>
            </div>*@

        <div class="card-body row">

            <div class="col-sm-4">

                <h5><strong class="text-secondary">Details</strong></h5>
                <hr class="bg-light" />

                @*<div class="form-group">
                        <label class="control-label">Customer Name</label>
                        <input type="text" class="form-control" value="@ViewBag.Customer" readonly="readonly">
                    </div>*@

                @*<div class="form-group">*@
                @*<strong>@Html.LabelFor(model => model.QuoteID, "QuoteID", htmlAttributes: new { @class = "control-label" })</strong>*@

                @*@Html.DropDownList("QuoteID", null, htmlAttributes: new { @class = "form-control" })*@
                @*@Html.EditorFor(model => model.QuoteID, new { htmlAttributes = new { @class = "form-control", @Value = ViewBag.QuoteID, @readonly = "readonly" } })*@
                @*@Html.HiddenFor(model => model.QuoteID)*@
                @*@Html.ValidationMessageFor(model => model.QuoteID, "", new { @class = "text-danger" })*@

                @*</div>*@

                <div class="form-group">
                    <strong>@Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label" })</strong>

                    @*@Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })*@
                    @Html.TextAreaFor(model => model.Description, 5, 20, new { @class = "form-control", @id = "Description" })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })

                </div>

                <div class="form-group">
                    <strong>@Html.LabelFor(model => model.Cost, htmlAttributes: new { @class = "control-label" })</strong>
                    @Html.EditorFor(model => model.Cost, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Cost, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.HiddenFor(model => model.Required, new { id = "Required", @Value = "True" })
                    <div class="checkbox icheck-alizarin">
                        <input type="checkbox" id="required" name="prepresssnewartwork" onclick="CheckBoxChange();" />
                        <label for="required" class="control-label">@Html.LabelFor(model => model.Required)</label>
                    </div>
                </div>

            </div>

            <div class="col-sm-2">

                <h5><strong class="text-secondary">Description</strong></h5>
                <hr class="bg-light" />

                <div class="form-group">
                    <strong>@Html.LabelFor(model => model.DoorTypeID, "DoorTypeID", htmlAttributes: new { @class = "control-label" })</strong>

                    @Html.DropDownList("DoorTypeID", null, "--Select DoorType--", htmlAttributes: new { @class = "form-control", @id = "DoorType", @onchange = "ChangeDoorType();" })
                    @Html.ValidationMessageFor(model => model.DoorTypeID, "", new { @class = "text-danger" })

                </div>

                <div class="form-group">
                    <strong>@Html.LabelFor(model => model.DesignTypeID, "DesignTypeID", htmlAttributes: new { @class = "control-label" })</strong>

                    @Html.DropDownList("DesignTypeID", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.DesignTypeID, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    <strong>@Html.LabelFor(model => model.ColorTypeID, "ColorTypeID", htmlAttributes: new { @class = "control-label" })</strong>

                    @Html.DropDownList("ColorTypeID", null, "--Select ColourType--", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ColorTypeID, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    <strong>@Html.LabelFor(model => model.LockTypeID, "LockTypeID", htmlAttributes: new { @class = "control-label" })</strong>

                    @Html.DropDownList("LockTypeID", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.LockTypeID, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    <strong>@Html.LabelFor(model => model.LockHeight, "LockHeight", htmlAttributes: new { @class = "control-label" })</strong>

                    @Html.EditorFor(model => model.LockHeight, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.LockHeight, "", new { @class = "text-danger" })

                </div>

                <div class="form-group">
                    <strong>Adaptors</strong>
                    @Html.DropDownList("HingeType", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.HingeType, "", new { @class = "text-danger" })
                </div>

            </div>

            <div class="col-sm-2">
                <h5><strong class="text-secondary">Height</strong></h5>
                <hr class="bg-light" />

                <div class="form-group">

                    <strong>@Html.LabelFor(model => model.Height, htmlAttributes: new { @class = "control-label" })</strong>

                    @Html.EditorFor(model => model.Height, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Height, "", new { @class = "text-danger" })

                </div>
            </div>

            <div class="col-sm-2">
                <h5><strong class="text-secondary">Description</strong></h5>
                <hr class="bg-light" />

                <img class="p-3 img-fluid" id="pic" src="~/images/Door_LH.PNG" />
            </div>

            <div class="col-sm-2">

                <h5><strong class="text-secondary">Widths</strong></h5>
                <hr class="bg-light" />

                <div class="form-group">
                    <strong>Top</strong>

                    @Html.EditorFor(model => model.Width1, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Width1, "", new { @class = "text-danger" })
                </div>

                <br />

                <div class="form-group">
                    <strong>Middle</strong>

                    @Html.EditorFor(model => model.Width2, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Width2, "", new { @class = "text-danger" })
                </div>

                <br />

                <div class="form-group">
                    <strong>Bottom</strong>

                    @Html.EditorFor(model => model.Width3, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Width3, "", new { @class = "text-danger" })
                </div>

            </div>



        </div>





        <div class="card-footer">
            @*<input type="submit" value="Create" class="btn btn-primary" />|*@
            <button type="submit" class="btn btn-primary border-dark shadow"><i class="fa fa-save"></i> Create</button>
            @*@Html.ActionLink("Back Details", "QuoteDetails", "Quotes", new { id = ViewBag.QuoteID }, new { @class = "btn btn-secondary border-dark shadow" })*@

            <a href="@Url.Action("QuoteDetails/"+ ViewBag.QuoteID, "Quotes")" class="btn btn-secondary border-dark shadow"><i class="fa fa-arrow-circle-left"></i><span> Back to Quote </span></a>
        </div>




    </div>

}



<link href="~/Content/themes/base/jquery-ui.css" rel="stylesheet" />
<link href="~/Content/icheck-bootstrap.css" rel="stylesheet" />

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script src="~/Scripts/jquery-ui-1.12.1.js"></script>

    <script>

        // ********************************************************************************
        // * Document loaded completed Trigger
        // ********************************************************************************
        $(document).ready(function () {

            ChangeDoorType();
            

            $('#TrackTypeID').multiselect({
                buttonClass: 'btn btn-secondary',
                buttonWidth: '280px',
                templates: {
                    li: '<li class="checkList"><a tabindex="0"><div class="aweCheckbox aweCheckbox-danger"><label for=""></label></div></a></li>',
                }
            });

            $('#required').prop('checked', true);
            $("#Required").val(true);

        });

        function CheckBoxChange() {
            if ($("#required").is(':checked')) $("#Required").val(true); else $("#Required").val(false);
        }

        function ChangeDoorType() {
            var picture = $("#DoorType :selected").text();

            picture = window.location.origin + '@Request.ApplicationPath' + '/images/' + picture + '.PNG';
            console.log('Picture :' + picture);
            $("#pic").attr("src", picture);
        }

    </script>





}
