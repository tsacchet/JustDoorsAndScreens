@model JustDoorsAndScreens.DoorItem

@{
    ViewBag.Title = "CreateSliderItem";
}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    @Html.HiddenFor(model => model.HingeType, new { Value = "1" })

    @Html.HiddenFor(model => model.QuoteID, new { @Value = ViewBag.QuoteID })

    <div class="card border border-dark shadow">

        <div class="card-header bg-light border-dark sticky-top">
            <h3 class="text-dark"><strong>Create Slider Item</strong></h3>
            <span class="text-dark text-sm-center"><strong>Customer:</strong> @ViewBag.Customer  <strong>Quote:</strong>  @ViewBag.QuoteID</span>
        </div>


        <div class="card-body row">

            <div class="col-sm-2">

                <h5>Details</h5>
                <hr class="bg-dark" />

                @*<div class="form-group">
                    <label class="control-label"><strong>Customer Name</strong></label>
                    <input type="text" class="form-control" value="@ViewBag.Customer" readonly="readonly">
                </div>*@

                @*<div class="form-group">
                    <strong>@Html.LabelFor(model => model.QuoteID, "QuoteID", htmlAttributes: new { @class = "control-label" })</strong>*@

                    @*@Html.DropDownList("QuoteID", null, htmlAttributes: new { @class = "form-control" })*@
                    @*@Html.EditorFor(model => model.QuoteID, new { htmlAttributes = new { @class = "form-control", @Value = ViewBag.QuoteID, @readonly = "readonly" } })
                    @Html.HiddenFor(model => model.QuoteID)
                    @Html.ValidationMessageFor(model => model.QuoteID, "", new { @class = "text-danger" })

                </div>*@

                <div class="form-group">
                    <strong>@Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label" })</strong>

                    @*@Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })*@
                    @Html.TextAreaFor(model => model.Description, 5, 20, new { @class = "form-control", @id = "Description" })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })

                </div>

                <div class="form-group">
                    <strong>@Html.LabelFor(model => model.Cost, htmlAttributes: new { @class = "control-label" })</strong>

                    @Html.EditorFor(model => model.Cost, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Cost, "", new { @class = "text-danger" })

                </div>
            </div>

            <div class="col-sm-2">

                <h5>Description</h5>
                <hr class="bg-dark" />

                <div class="form-group">
                    <strong>@Html.LabelFor(model => model.DoorTypeID, "DoorTypeID", htmlAttributes: new { @class = "control-label" })</strong>

                    @Html.DropDownList("DoorTypeID", null, htmlAttributes: new { @class = "form-control", @id = "DoorType", @onchange = "ChangeDoorType();" })
                    @Html.ValidationMessageFor(model => model.DoorTypeID, "", new { @class = "text-danger" })

                </div>

                <div class="form-group">
                    <strong>@Html.LabelFor(model => model.DesignTypeID, "DesignTypeID", htmlAttributes: new { @class = "control-label" })</strong>

                    @Html.DropDownList("DesignTypeID", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.DesignTypeID, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    <strong>@Html.LabelFor(model => model.ColorTypeID, "ColorTypeID", htmlAttributes: new { @class = "control-label" })</strong>

                    @Html.DropDownList("ColorTypeID", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ColorTypeID, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    <strong>@Html.LabelFor(model => model.LockTypeID, "LockTypeID", htmlAttributes: new { @class = "control-label" })</strong>

                    @Html.DropDownList("LockTypeID", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.LockTypeID, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    <strong>@Html.LabelFor(model => model.LockHeight, "LockHeight", htmlAttributes: new { @class = "control-label" })</strong>

                    @Html.EditorFor(model => model.LockHeight, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.LockHeight, "", new { @class = "text-danger" })

                </div>



            </div>

            <div class="col-sm-2">
                <h5>Height</h5>
                <hr class="bg-dark" />

                <div class="form-group">

                    <strong>@Html.LabelFor(model => model.Height, htmlAttributes: new { @class = "control-label" })</strong>

                    @Html.EditorFor(model => model.Height, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Height, "", new { @class = "text-danger" })

                </div>
            </div>

            <div class="col-sm-2">
                <h5>Description</h5>
                <hr class="bg-dark" />

                <img class="p-3 img-fluid" id="pic" src="~/images/Door_LH.PNG" />

                <br />


                <div class="form-group">
                    <strong>Width</strong>

                    @Html.EditorFor(model => model.Width1, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Width1, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-sm-2">

                <h5>Sliders Stuff</h5>
                <hr class="bg-dark" />

                <div class="form-group">
                    <strong>@Html.LabelFor(model => model.SliderTopTrackType, "SliderTopTrackType", htmlAttributes: new { @class = "control-label" })</strong>
                    @Html.DropDownList("SliderTopTrackType", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.SliderTopTrackType, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    <strong>@Html.LabelFor(model => model.SliderTopTrackWidth, htmlAttributes: new { @class = "control-label" })</strong>

                    @Html.EditorFor(model => model.SliderTopTrackWidth, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.SliderTopTrackWidth, "", new { @class = "text-danger" })

                </div>



                <div class="form-group">
                    <strong>@Html.LabelFor(model => model.SliderBottomTrackType, "SliderBottomTrackType", htmlAttributes: new { @class = "control-label" })</strong>
                    @Html.DropDownList("SliderBottomTrackType", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.SliderBottomTrackType, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    <strong>@Html.LabelFor(model => model.SliderBottomTrackWidth, htmlAttributes: new { @class = "control-label" })</strong>

                    @Html.EditorFor(model => model.SliderBottomTrackWidth, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.SliderBottomTrackWidth, "", new { @class = "text-danger" })

                </div>



                <div class="form-group">
                    <strong>@Html.LabelFor(model => model.SliderSideChannelType, "SliderSideChannelType", htmlAttributes: new { @class = "control-label" })</strong>
                    @Html.DropDownList("SliderSideChannelType", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.SliderSideChannelType, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    <strong>@Html.LabelFor(model => model.SliderSideChannelWidth, htmlAttributes: new { @class = "control-label" })</strong>

                    @Html.EditorFor(model => model.SliderSideChannelWidth, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.SliderSideChannelWidth, "", new { @class = "text-danger" })

                </div>

            </div>

            <div class="col-sm-2">
                <h5>Sliders Stuff</h5>
                <hr class="bg-dark" />


                <div class="form-group">
                    <strong>@Html.LabelFor(model => model.SliderBugStrip, htmlAttributes: new { @class = "control-label" })</strong>
                    <div class="checkbox">
                        @Html.EditorFor(model => model.SliderBugStrip)
                        @Html.ValidationMessageFor(model => model.SliderBugStrip, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="form-group">
                    <strong>Fs Qty.</strong>
                    @Html.EditorFor(model => model.F, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.F, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    <strong>Zs Qty.</strong>
                    @Html.EditorFor(model => model.Z, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Z, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    <strong>@Html.LabelFor(model => model.BugStrip, htmlAttributes: new { @class = "control-label" }) Qty.</strong>
                    @Html.EditorFor(model => model.BugStrip, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.BugStrip, "", new { @class = "text-danger" })
                </div>

            </div>

        </div>





        <div class="card-footer">
            @*<input type="submit" value="Create" class="btn btn-primary" />|*@
            <button type="submit" class="btn btn-primary border-dark shadow"><i class="fa fa-save"></i> Create</button>
            @*@Html.ActionLink("Back Details", "QuoteDetails", "Quotes", new { id = ViewBag.QuoteID }, new { @class = "btn btn-secondary border-dark shadow" })*@

            <a href="@Url.Action("QuoteDetails/"+ ViewBag.QuoteID, "Quotes")" class="btn btn-secondary border-dark shadow"><i class="fa fa-arrow-circle-left"></i><span> Back to Quote </span></a>
        </div>




    </div>

}



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>

        // ********************************************************************************
        // * Document loaded completed Trigger
        // ********************************************************************************
        $(document).ready(function () {

            ChangeDoorType();

            $('#TrackTypeID').multiselect({
                buttonClass: 'btn btn-secondary',
                buttonWidth: '280px',
                templates: {
                    li: '<li class="checkList"><a tabindex="0"><div class="aweCheckbox aweCheckbox-danger"><label for=""></label></div></a></li>',
                }
            });

            //$('.multiselect-container div.aweCheckbox').each(function (index) {

            //    var id = 'multiselect-' + index,
            //        $input = $(this).find('input');

            //    // Associate the label and the input
            //    $(this).find('label').attr('for', id);
            //    $input.attr('id', id);

            //    // Remove the input from the label wrapper
            //    $input.detach();

            //    // Place the input back in before the label
            //    $input.prependTo($(this));

            //    $(this).click(function (e) {
            //        // Prevents the click from bubbling up and hiding the dropdown
            //        e.stopPropagation();
            //    });

            //});

        });


        function ChangeDoorType() {
            var picture = $("#DoorType :selected").text();

            picture = window.location.origin + '@Request.ApplicationPath' + '/images/' + picture + '.PNG';
            console.log('Picture :' + picture);
            $("#pic").attr("src", picture);
        }

        //function GetSelectedTracks() {
        //    var trck = '';
        //    $("#TrackTypeID option:selected").each(function () {
        //        var $this = $(this);
        //        if ($this.length) {
        //            var selText = $this.text();
        //            var selValue = $this.val();
        //            console.log('Select TrackID : ' + selText + ' - Selected Track Value : ' + selValue);

        //            trck = trck + selText + ', ';
        //        }
        //    });

        //    $('#tracks').val(trck.slice(0, -1));
        //};

    </script>





}
